// src/hooks/useAppLanguage.ts
import { useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

const APP_LANGUAGE_KEY = 'chinese_phrasebook_app_language';
const LANGUAGE_VERSION = '1.0'; // –í–µ—Ä—Å–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π

export type AppLanguageMode = 'tk' | 'zh';

export interface AppLanguageConfig {
  mode: AppLanguageMode;
  primaryLanguage: 'tk' | 'zh';    // –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  learningLanguage: 'zh' | 'tk';   // –ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫
  helperLanguage: 'ru';            // –í—Å–µ–≥–¥–∞ —Ä—É—Å—Å–∫–∏–π
  version: string;                 // –í–µ—Ä—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
}

// –ü–µ—Ä–µ–≤–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
export interface InterfaceTexts {
  // –û–±—â–∏–µ
  home: string;
  search: string;
  favorites: string;
  settings: string;
  
  // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
  appTitle: string;
  selectCategory: string;
  recentlyStudied: string;
  
  // –î–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
  pronunciation: string;
  addToFavorites: string;
  inFavorites: string;
  share: string;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  settingsTitle: string;
  languageInterface: string;
  switchLanguage: string;
  audio: string;
  soundEffects: string;
  data: string;
  clearHistory: string;
  offlineMode: string;
  about: string;
  feedback: string;
  
  // –ü–æ–∏—Å–∫
  searchPlaceholder: string;
  noResults: string;
  searchHistory: string;
  
  // –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  cancel: string;
  save: string;
  delete: string;
  confirm: string;
  loading: string;
  error: string;
  success: string;
}

const INTERFACE_TEXTS: Record<AppLanguageMode, InterfaceTexts> = {
  tk: {
    // –¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    home: 'Ba≈ü sahypa',
    search: 'G√∂zleg',
    favorites: 'Halan√Ωanlar',
    settings: 'Sazlamalar',
    
    appTitle: 'Hyta√Ω s√∂zlem kitaby',
    selectCategory: 'Kategori√Ωa sa√Ωla≈à',
    recentlyStudied: 'üìö So≈àky √∂wrenilen',
    
    pronunciation: 'A√Ωdyly≈ü',
    addToFavorites: 'Halan√Ωanlara go≈ü',
    inFavorites: 'Halan√Ωanlarda',
    share: 'Pa√Ωla≈ü',
    
    settingsTitle: '‚öôÔ∏è Sazlamalar',
    languageInterface: 'Interfe√Ωs dili',
    switchLanguage: 'Dil √ßaly≈ü',
    audio: 'Audio',
    soundEffects: 'Ses effektleri',
    data: 'Maglumatlar',
    clearHistory: 'Taryhy arassala',
    offlineMode: 'Ofla√Ωn —Ä–µ–∂im',
    about: 'Programma hakda',
    feedback: 'Pikir aly≈ümak',
    
    searchPlaceholder: 'Islendik dilde s√∂zlem girizi≈à...',
    noResults: 'Hi√ß zat tapylmady',
    searchHistory: 'G√∂zleg taryhy',
    
    cancel: '√ùatyr',
    save: '√ùatda sakla',
    delete: 'Arassala',
    confirm: 'Tassykla',
    loading: '√ù√ºklen√Ω√§r...',
    error: '√ùal≈ày≈ü',
    success: '√úst√ºnlik',
  },
  
  zh: {
    // –ö–∏—Ç–∞–π—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    home: '‰∏ªÈ°µ',
    search: 'ÊêúÁ¥¢',
    favorites: 'Êî∂Ëóè',
    settings: 'ËÆæÁΩÆ',
    
    appTitle: 'ÂúüÂ∫ìÊõºËØ≠‰ºöËØùÊâãÂÜå',
    selectCategory: 'ÈÄâÊã©Á±ªÂà´',
    recentlyStudied: 'üìö ÊúÄËøëÂ≠¶‰π†ÁöÑ',
    
    pronunciation: 'ÂèëÈü≥',
    addToFavorites: 'Ê∑ªÂä†Âà∞Êî∂Ëóè',
    inFavorites: 'Â∑≤Êî∂Ëóè',
    share: 'ÂàÜ‰∫´',
    
    settingsTitle: '‚öôÔ∏è ËÆæÁΩÆ',
    languageInterface: 'ÁïåÈù¢ËØ≠Ë®Ä',
    switchLanguage: 'ÂàáÊç¢ËØ≠Ë®Ä',
    audio: 'Èü≥È¢ë',
    soundEffects: 'Èü≥Êïà',
    data: 'Êï∞ÊçÆ',
    clearHistory: 'Ê∏ÖÈô§ÂéÜÂè≤',
    offlineMode: 'Á¶ªÁ∫øÊ®°Âºè',
    about: 'ÂÖ≥‰∫éÂ∫îÁî®',
    feedback: 'ÂèçÈ¶à',
    
    searchPlaceholder: 'ËæìÂÖ•‰ªª‰ΩïËØ≠Ë®ÄÁöÑÁü≠ËØ≠...',
    noResults: 'Êú™ÊâæÂà∞ÁªìÊûú',
    searchHistory: 'ÊêúÁ¥¢ÂéÜÂè≤',
    
    cancel: 'ÂèñÊ∂à',
    save: '‰øùÂ≠ò',
    delete: 'Âà†Èô§',
    confirm: 'Á°ÆËÆ§',
    loading: 'Âä†ËΩΩ‰∏≠...',
    error: 'ÈîôËØØ',
    success: 'ÊàêÂäü',
  }
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const validateConfig = (config: any): config is AppLanguageConfig => {
  return (
    config &&
    typeof config === 'object' &&
    ['tk', 'zh'].includes(config.mode) &&
    ['tk', 'zh'].includes(config.primaryLanguage) &&
    ['tk', 'zh'].includes(config.learningLanguage) &&
    config.helperLanguage === 'ru' &&
    config.primaryLanguage !== config.learningLanguage
  );
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const createConfig = (mode: AppLanguageMode): AppLanguageConfig => ({
  mode,
  primaryLanguage: mode,
  learningLanguage: mode === 'tk' ? 'zh' : 'tk',
  helperLanguage: 'ru',
  version: LANGUAGE_VERSION,
});

export function useAppLanguage() {
  const [isLoading, setIsLoading] = useState(true);
  const [isFirstLaunch, setIsFirstLaunch] = useState(false);
  const [config, setConfig] = useState<AppLanguageConfig>(createConfig('tk'));
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadLanguageConfig();
  }, []);

  const loadLanguageConfig = async () => {
    try {
      setError(null);
      const savedConfig = await AsyncStorage.getItem(APP_LANGUAGE_KEY);
      
      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (validateConfig(parsedConfig)) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
          if (parsedConfig.version !== LANGUAGE_VERSION) {
            console.log('–ú–∏–≥—Ä–∞—Ü–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≤–µ—Ä—Å–∏–∏', parsedConfig.version, '–Ω–∞', LANGUAGE_VERSION);
            const migratedConfig = createConfig(parsedConfig.mode || 'tk');
            await saveConfig(migratedConfig);
            setConfig(migratedConfig);
          } else {
            setConfig(parsedConfig);
          }
          setIsFirstLaunch(false);
        } else {
          console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–∑—ã–∫–∞, —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
          throw new Error('Invalid language configuration');
        }
      } else {
        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        setIsFirstLaunch(true);
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      setIsFirstLaunch(true);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      setConfig(createConfig('tk'));
    } finally {
      setIsLoading(false);
    }
  };

  const saveConfig = async (newConfig: AppLanguageConfig): Promise<boolean> => {
    try {
      if (!validateConfig(newConfig)) {
        throw new Error('Invalid configuration');
      }
      
      await AsyncStorage.setItem(APP_LANGUAGE_KEY, JSON.stringify(newConfig));
      return true;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞');
      return false;
    }
  };

  const setLanguageMode = async (mode: AppLanguageMode, shouldSave: boolean = true) => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
      if (!['tk', 'zh'].includes(mode)) {
        throw new Error(`Invalid language mode: ${mode}`);
      }

      const newConfig = createConfig(mode);
      
      if (shouldSave) {
        const saved = await saveConfig(newConfig);
        if (saved) {
          setIsFirstLaunch(false);
          setError(null);
        }
      }

      setConfig(newConfig);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫');
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫)
  const switchMode = async (): Promise<boolean> => {
    try {
      const newMode: AppLanguageMode = config.mode === 'tk' ? 'zh' : 'tk';
      await setLanguageMode(newMode, true);
      return true;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞:', error);
      return false;
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  const getTexts = (): InterfaceTexts => {
    try {
      return INTERFACE_TEXTS[config.primaryLanguage as AppLanguageMode] || INTERFACE_TEXTS.tk;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', error);
      return INTERFACE_TEXTS.tk; // Fallback –∫ —Ç—É—Ä–∫–º–µ–Ω—Å–∫–æ–º—É
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Ä–æ–¥–Ω–æ–º —è–∑—ã–∫–µ
  const getLanguageName = (lang: 'tk' | 'zh' | 'ru'): string => {
    const names = {
      tk: config.primaryLanguage === 'tk' ? 'T√ºrkmen√ße' : 'ÂúüÂ∫ìÊõºËØ≠',
      zh: config.primaryLanguage === 'tk' ? 'Hyta√Ω√ßa' : '‰∏≠Êñá',
      ru: config.primaryLanguage === 'tk' ? 'Rus√ßa' : '‰øÑËØ≠'
    };
    return names[lang] || lang;
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–∑—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
 // src/hooks/useAppLanguage.ts - —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è getPhraseTexts

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–∑—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
const getPhraseTexts = (phrase: { chinese: string; turkmen: string; russian: string }) => {
  try {
    if (config.mode === 'tk') {
      // –¢—É—Ä–∫–º–µ–Ω: –ø–æ–Ω–∏–º–∞–µ—Ç —Ç—É—Ä–∫–º–µ–Ω—Å–∫–∏–π, –∏–∑—É—á–∞–µ—Ç –∫–∏—Ç–∞–π—Å–∫–∏–π
      return {
        primary: phrase.chinese,     // –ö–∏—Ç–∞–π—Å–∫–∏–π - —Ç–æ —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è)
        learning: phrase.turkmen,    // –¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π - —Ç–æ —á—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π)
        helper: phrase.russian       // –†—É—Å—Å–∫–∏–π - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å
      };
    } else {
      // –ö–∏—Ç–∞–µ—Ü: –ø–æ–Ω–∏–º–∞–µ—Ç –∫–∏—Ç–∞–π—Å–∫–∏–π, –∏–∑—É—á–∞–µ—Ç —Ç—É—Ä–∫–º–µ–Ω—Å–∫–∏–π
      return {
        primary: phrase.turkmen,     // –¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π - —Ç–æ —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è)
        learning: phrase.chinese,    // –ö–∏—Ç–∞–π—Å–∫–∏–π - —Ç–æ —á—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π)
        helper: phrase.russian       // –†—É—Å—Å–∫–∏–π - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å
      };
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —Ñ—Ä–∞–∑—ã:', error);
    // Fallback
    return {
      primary: phrase.chinese,
      learning: phrase.turkmen,
      helper: phrase.russian
    };
  }
};

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const validateCurrentConfig = (): boolean => {
    return validateConfig(config);
  };

  // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
  const resetLanguageSettings = async (): Promise<boolean> => {
    try {
      await AsyncStorage.removeItem(APP_LANGUAGE_KEY);
      setIsFirstLaunch(true);
      setError(null);
      setConfig(createConfig('tk'));
      return true;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      return false;
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
  const getConfigInfo = () => {
    return {
      isValid: validateConfig(config),
      config: config,
      version: LANGUAGE_VERSION,
      error: error,
      isFirstLaunch: isFirstLaunch,
      isLoading: isLoading,
    };
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π)
  const updateConfig = async (updates: Partial<AppLanguageConfig>): Promise<boolean> => {
    try {
      const newConfig = { ...config, ...updates, version: LANGUAGE_VERSION };
      
      if (!validateConfig(newConfig)) {
        throw new Error('Updated configuration is invalid');
      }
      
      const saved = await saveConfig(newConfig);
      if (saved) {
        setConfig(newConfig);
        setError(null);
        return true;
      }
      return false;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
      return false;
    }
  };

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    isFirstLaunch,
    config,
    error,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    setLanguageMode,
    switchMode,
    getTexts,
    getLanguageName,
    getPhraseTexts,
    
    // –£—Ç–∏–ª–∏—Ç—ã –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    validateCurrentConfig,
    getConfigInfo,
    resetLanguageSettings,
    updateConfig,
  };
}
// src/contexts/LanguageContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

const APP_LANGUAGE_KEY = 'chinese_phrasebook_app_language';
const LANGUAGE_VERSION = '1.0';

export type AppLanguageMode = 'tk' | 'zh';

export interface AppLanguageConfig {
  mode: AppLanguageMode;
  primaryLanguage: 'tk' | 'zh';
  learningLanguage: 'zh' | 'tk';
  helperLanguage: 'ru';
  version: string;
}

export interface InterfaceTexts {
  home: string;
  search: string;
  favorites: string;
  settings: string;
  appTitle: string;
  selectCategory: string;
  recentlyStudied: string;
  pronunciation: string;
  addToFavorites: string;
  inFavorites: string;
  share: string;
  settingsTitle: string;
  languageInterface: string;
  switchLanguage: string;
  audio: string;
  soundEffects: string;
  data: string;
  clearHistory: string;
  offlineMode: string;
  about: string;
  feedback: string;
  searchPlaceholder: string;
  noResults: string;
  searchHistory: string;
  cancel: string;
  save: string;
  delete: string;
  confirm: string;
  loading: string;
  error: string;
  success: string;
}

const INTERFACE_TEXTS: Record<AppLanguageMode, InterfaceTexts> = {
  tk: {
    home: 'Ba≈ü sahypa',
    search: 'G√∂zleg',
    favorites: 'Halan√Ωanlar',
    settings: 'Sazlamalar',
    appTitle: 'Hyta√Ω s√∂zlem kitaby',
    selectCategory: 'Kategori√Ωa sa√Ωla≈à',
    recentlyStudied: 'üìö So≈àky √∂wrenilen',
    pronunciation: 'A√Ωdyly≈ü',
    addToFavorites: 'Halan√Ωanlara go≈ü',
    inFavorites: 'Halan√Ωanlarda',
    share: 'Pa√Ωla≈ü',
    settingsTitle: '‚öôÔ∏è Sazlamalar',
    languageInterface: 'Interfe√Ωs dili',
    switchLanguage: 'Dil √ßaly≈ü',
    audio: 'Audio',
    soundEffects: 'Ses effektleri',
    data: 'Maglumatlar',
    clearHistory: 'Taryhy arassala',
    offlineMode: 'Ofla√Ωn —Ä–µ–∂im',
    about: 'Programma hakda',
    feedback: 'Pikir aly≈ümak',
    searchPlaceholder: 'Islendik dilde s√∂zlem girizi≈à...',
    noResults: 'Hi√ß zat tapylmady',
    searchHistory: 'G√∂zleg taryhy',
    cancel: '√ùatyr',
    save: '√ùatda sakla',
    delete: 'Arassala',
    confirm: 'Tassykla',
    loading: '√ù√ºklen√Ω√§r...',
    error: '√ùal≈ày≈ü',
    success: '√úst√ºnlik',
  },
  zh: {
    home: '‰∏ªÈ°µ',
    search: 'ÊêúÁ¥¢',
    favorites: 'Êî∂Ëóè',
    settings: 'ËÆæÁΩÆ',
    appTitle: 'ÂúüÂ∫ìÊõºËØ≠‰ºöËØùÊâãÂÜå',
    selectCategory: 'ÈÄâÊã©Á±ªÂà´',
    recentlyStudied: 'üìö ÊúÄËøëÂ≠¶‰π†ÁöÑ',
    pronunciation: 'ÂèëÈü≥',
    addToFavorites: 'Ê∑ªÂä†Âà∞Êî∂Ëóè',
    inFavorites: 'Â∑≤Êî∂Ëóè',
    share: 'ÂàÜ‰∫´',
    settingsTitle: '‚öôÔ∏è ËÆæÁΩÆ',
    languageInterface: 'ÁïåÈù¢ËØ≠Ë®Ä',
    switchLanguage: 'ÂàáÊç¢ËØ≠Ë®Ä',
    audio: 'Èü≥È¢ë',
    soundEffects: 'Èü≥Êïà',
    data: 'Êï∞ÊçÆ',
    clearHistory: 'Ê∏ÖÈô§ÂéÜÂè≤',
    offlineMode: 'Á¶ªÁ∫øÊ®°Âºè',
    about: 'ÂÖ≥‰∫éÂ∫îÁî®',
    feedback: 'ÂèçÈ¶à',
    searchPlaceholder: 'ËæìÂÖ•‰ªª‰ΩïËØ≠Ë®ÄÁöÑÁü≠ËØ≠...',
    noResults: 'Êú™ÊâæÂà∞ÁªìÊûú',
    searchHistory: 'ÊêúÁ¥¢ÂéÜÂè≤',
    cancel: 'ÂèñÊ∂à',
    save: '‰øùÂ≠ò',
    delete: 'Âà†Èô§',
    confirm: 'Á°ÆËÆ§',
    loading: 'Âä†ËΩΩ‰∏≠...',
    error: 'ÈîôËØØ',
    success: 'ÊàêÂäü',
  }
};

interface LanguageContextType {
  isLoading: boolean;
  isFirstLaunch: boolean;
  config: AppLanguageConfig;
  error: string | null;
  setLanguageMode: (mode: AppLanguageMode, shouldSave?: boolean) => Promise<void>;
  switchMode: () => Promise<boolean>;
  getTexts: () => InterfaceTexts;
  getLanguageName: (lang: 'tk' | 'zh' | 'ru') => string;
  getPhraseTexts: (phrase: { chinese: string; turkmen: string; russian: string }) => {
    primary: string;
    learning: string;
    helper: string;
  };
  resetLanguageSettings: () => Promise<boolean>;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

const validateConfig = (config: any): config is AppLanguageConfig => {
  return (
    config &&
    typeof config === 'object' &&
    ['tk', 'zh'].includes(config.mode) &&
    ['tk', 'zh'].includes(config.primaryLanguage) &&
    ['tk', 'zh'].includes(config.learningLanguage) &&
    config.helperLanguage === 'ru' &&
    config.primaryLanguage !== config.learningLanguage
  );
};

export const createConfig = (mode: AppLanguageMode): AppLanguageConfig => ({
  mode,
  primaryLanguage: mode,
  learningLanguage: mode === 'tk' ? 'zh' : 'tk',
  helperLanguage: 'ru',
  version: LANGUAGE_VERSION,
});

interface LanguageProviderProps {
  children: ReactNode;
  initialConfig?: AppLanguageConfig;
}

export function LanguageProvider({ children, initialConfig }: LanguageProviderProps) {
  const [isLoading, setIsLoading] = useState(!initialConfig);
  const [isFirstLaunch, setIsFirstLaunch] = useState(false);
  const [config, setConfig] = useState<AppLanguageConfig>(initialConfig || createConfig('tk'));
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!initialConfig) {
      loadLanguageConfig();
    }
  }, [initialConfig]);

  const loadLanguageConfig = async () => {
    try {
      setError(null);
      const savedConfig = await AsyncStorage.getItem(APP_LANGUAGE_KEY);
      
      if (savedConfig) {
        const parsedConfig = JSON.parse(savedConfig);
        
        if (validateConfig(parsedConfig)) {
          if (parsedConfig.version !== LANGUAGE_VERSION) {
            const migratedConfig = createConfig(parsedConfig.mode || 'tk');
            await saveConfig(migratedConfig);
            setConfig(migratedConfig);
          } else {
            setConfig(parsedConfig);
          }
          setIsFirstLaunch(false);
        } else {
          throw new Error('Invalid language configuration');
        }
      } else {
        setIsFirstLaunch(true);
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      setIsFirstLaunch(true);
      setConfig(createConfig('tk'));
    } finally {
      setIsLoading(false);
    }
  };

  const saveConfig = async (newConfig: AppLanguageConfig): Promise<boolean> => {
    try {
      if (!validateConfig(newConfig)) {
        throw new Error('Invalid configuration');
      }
      
      await AsyncStorage.setItem(APP_LANGUAGE_KEY, JSON.stringify(newConfig));
      return true;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞');
      return false;
    }
  };

  const setLanguageMode = async (mode: AppLanguageMode, shouldSave: boolean = true) => {
    try {
      if (!['tk', 'zh'].includes(mode)) {
        throw new Error(`Invalid language mode: ${mode}`);
      }

      const newConfig = createConfig(mode);
      
      if (shouldSave) {
        const saved = await saveConfig(newConfig);
        if (saved) {
          setIsFirstLaunch(false);
          setError(null);
        }
      }

      setConfig(newConfig);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫');
    }
  };

  const switchMode = async (): Promise<boolean> => {
    try {
      const newMode: AppLanguageMode = config.mode === 'tk' ? 'zh' : 'tk';
      await setLanguageMode(newMode, true);
      return true;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞:', error);
      return false;
    }
  };

  const getTexts = (): InterfaceTexts => {
    try {
      return INTERFACE_TEXTS[config.primaryLanguage as AppLanguageMode] || INTERFACE_TEXTS.tk;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', error);
      return INTERFACE_TEXTS.tk;
    }
  };

  const getLanguageName = (lang: 'tk' | 'zh' | 'ru'): string => {
    const names = {
      tk: config.primaryLanguage === 'tk' ? 'T√ºrkmen√ße' : 'ÂúüÂ∫ìÊõºËØ≠',
      zh: config.primaryLanguage === 'tk' ? 'Hyta√Ω√ßa' : '‰∏≠Êñá',
      ru: config.primaryLanguage === 'tk' ? 'Rus√ßa' : '‰øÑËØ≠'
    };
    return names[lang] || lang;
  };

  const getPhraseTexts = (phrase: { chinese: string; turkmen: string; russian: string }) => {
    try {
      if (config.mode === 'tk') {
        // –¢—É—Ä–∫–º–µ–Ω: –ø–æ–Ω–∏–º–∞–µ—Ç —Ç—É—Ä–∫–º–µ–Ω—Å–∫–∏–π, –∏–∑—É—á–∞–µ—Ç –∫–∏—Ç–∞–π—Å–∫–∏–π
        return {
          primary: phrase.chinese,     // –ö–∏—Ç–∞–π—Å–∫–∏–π - —Ç–æ —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å
          learning: phrase.turkmen,    // –¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π - —Ç–æ —á—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç
          helper: phrase.russian       // –†—É—Å—Å–∫–∏–π - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å
        };
      } else {
        // –ö–∏—Ç–∞–µ—Ü: –ø–æ–Ω–∏–º–∞–µ—Ç –∫–∏—Ç–∞–π—Å–∫–∏–π, –∏–∑—É—á–∞–µ—Ç —Ç—É—Ä–∫–º–µ–Ω—Å–∫–∏–π
        return {
          primary: phrase.turkmen,     // –¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π - —Ç–æ —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å
          learning: phrase.chinese,    // –ö–∏—Ç–∞–π—Å–∫–∏–π - —Ç–æ —á—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç
          helper: phrase.russian       // –†—É—Å—Å–∫–∏–π - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å
        };
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —Ñ—Ä–∞–∑—ã:', error);
      return {
        primary: phrase.chinese,
        learning: phrase.turkmen,
        helper: phrase.russian
      };
    }
  };

  const resetLanguageSettings = async (): Promise<boolean> => {
    try {
      await AsyncStorage.removeItem(APP_LANGUAGE_KEY);
      setIsFirstLaunch(true);
      setError(null);
      setConfig(createConfig('tk'));
      return true;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      return false;
    }
  };

  const value: LanguageContextType = {
    isLoading,
    isFirstLaunch,
    config,
    error,
    setLanguageMode,
    switchMode,
    getTexts,
    getLanguageName,
    getPhraseTexts,
    resetLanguageSettings,
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useAppLanguage(): LanguageContextType {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useAppLanguage must be used within a LanguageProvider');
  }
  return context;
}
// src/contexts/OfflineDataContext.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';
import { View, Text, ActivityIndicator, Alert } from 'react-native';
import { phrases as defaultPhrases } from '../data/phrases';
import { categories as defaultCategories } from '../data/categories';
import { useOffline } from '../hooks/useOffline';
import { Phrase, Category } from '../types';
import { Colors } from '../constants/Colors';

interface OfflineDataContextType {
  // –î–∞–Ω–Ω—ã–µ
  phrases: Phrase[];
  categories: Category[];
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean;
  isOfflineMode: boolean;
  dataSource: 'cache' | 'local' | 'hybrid';
  lastUpdate: Date | null;
  
  // –§—É–Ω–∫—Ü–∏–∏
  refreshData: () => Promise<boolean>;
  getPhrase: (id: string) => Phrase | undefined;
  getCategory: (id: string) => Category | undefined;
  getPhrasesByCategory: (categoryId: string) => Phrase[];
  searchPhrases: (query: string, categoryId?: string) => Phrase[];
  
  // Offline —Å—Ç–∞—Ç—É—Å
  isDataAvailable: boolean;
  canUseApp: boolean;
}

const OfflineDataContext = createContext<OfflineDataContextType | undefined>(undefined);

interface OfflineDataProviderProps {
  children: ReactNode;
}

export function OfflineDataProvider({ children }: OfflineDataProviderProps) {
  const [phrases, setPhrases] = useState<Phrase[]>(defaultPhrases);
  const [categories, setCategories] = useState<Category[]>(defaultCategories);
  const [isLoading, setIsLoading] = useState(true);
  const [dataSource, setDataSource] = useState<'cache' | 'local' | 'hybrid'>('local');
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  
  const offlineHook = useOffline();
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const {
    isOnline = true,
    isDataCached = false,
    cacheStatus = 'initializing',
    getCachedData,
    refreshCache,
    getCacheInfo
  } = offlineHook || {};

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    initializeData();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
  useEffect(() => {
    if (isOnline && cacheStatus === 'cached') {
      checkForUpdates();
    }
  }, [isOnline, cacheStatus]);

  const initializeData = async () => {
    try {
      setIsLoading(true);
      
      if (!getCachedData) {
        // –ï—Å–ª–∏ —Ö—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        setPhrases(defaultPhrases);
        setCategories(defaultCategories);
        setDataSource('local');
        setLastUpdate(new Date());
        return;
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const cachedData = await getCachedData();
      
      if (cachedData.fromCache) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        setPhrases(cachedData.phrases);
        setCategories(cachedData.categories);
        setDataSource('cache');
        
        if (getCacheInfo) {
          const cacheInfo = await getCacheInfo();
          if (cacheInfo) {
            setLastUpdate(cacheInfo.lastUpdated);
          }
        }
        
        console.log('‚úÖ Loaded data from cache:', {
          phrases: cachedData.phrases.length,
          categories: cachedData.categories.length
        });
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        setPhrases(defaultPhrases);
        setCategories(defaultCategories);
        setDataSource('local');
        setLastUpdate(new Date());
        
        console.log('üì± Using local data as fallback');
      }
      
    } catch (error) {
      console.warn('Data initialization failed:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setPhrases(defaultPhrases);
      setCategories(defaultCategories);
      setDataSource('local');
      setLastUpdate(new Date());
    } finally {
      setIsLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const checkForUpdates = async () => {
    if (!isOnline || !getCacheInfo) return;

    try {
      const cacheInfo = await getCacheInfo();
      
      if (cacheInfo) {
        const daysSinceUpdate = (Date.now() - cacheInfo.lastUpdated.getTime()) / (1000 * 60 * 60 * 24);
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
        if (daysSinceUpdate > 3) {
          Alert.alert(
            'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
            '–î–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å?',
            [
              { text: '–ü–æ–∑–∂–µ', style: 'cancel' },
              { 
                text: '–û–±–Ω–æ–≤–∏—Ç—å', 
                onPress: () => refreshData(),
                style: 'default'
              }
            ]
          );
        }
      }
    } catch (error) {
      console.warn('Check for updates failed:', error);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const refreshData = useCallback(async (): Promise<boolean> => {
    try {
      if (!refreshCache) {
        console.warn('Refresh cache not available');
        return false;
      }

      const success = await refreshCache();
      
      if (success) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await initializeData();
        
        Alert.alert(
          '‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
          '–§—Ä–∞–∑—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        );
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.warn('Refresh data failed:', error);
      Alert.alert(
        '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
      return false;
    }
  }, [refreshCache]);

  // –ü–æ–∏—Å–∫ —Ñ—Ä–∞–∑—ã –ø–æ ID
  const getPhrase = useCallback((id: string): Phrase | undefined => {
    try {
      return phrases.find(phrase => phrase.id === id);
    } catch (error) {
      console.warn('Get phrase failed:', error);
      return undefined;
    }
  }, [phrases]);

  // –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
  const getCategory = useCallback((id: string): Category | undefined => {
    try {
      return categories.find(category => category.id === id);
    } catch (error) {
      console.warn('Get category failed:', error);
      return undefined;
    }
  }, [categories]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—Ä–∞–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getPhrasesByCategory = useCallback((categoryId: string): Phrase[] => {
    try {
      return phrases.filter(phrase => phrase.categoryId === categoryId);
    } catch (error) {
      console.warn('Get phrases by category failed:', error);
      return [];
    }
  }, [phrases]);

  // –ü–æ–∏—Å–∫ —Ñ—Ä–∞–∑
  const searchPhrases = useCallback((query: string, categoryId?: string): Phrase[] => {
    try {
      if (!query.trim()) return [];

      let searchPool = phrases;
      
      if (categoryId) {
        searchPool = searchPool.filter(phrase => phrase.categoryId === categoryId);
      }

      const lowerQuery = query.toLowerCase();
      return searchPool.filter(phrase => 
        phrase.chinese?.toLowerCase().includes(lowerQuery) ||
        phrase.pinyin?.toLowerCase().includes(lowerQuery) ||
        phrase.russian?.toLowerCase().includes(lowerQuery) ||
        phrase.turkmen?.toLowerCase().includes(lowerQuery)
      );
    } catch (error) {
      console.warn('Search phrases failed:', error);
      return [];
    }
  }, [phrases]);

  const value: OfflineDataContextType = {
    phrases,
    categories,
    isLoading,
    isOfflineMode: !isOnline,
    dataSource,
    lastUpdate,
    refreshData,
    getPhrase,
    getCategory,
    getPhrasesByCategory,
    searchPhrases,
    isDataAvailable: phrases.length > 0 && categories.length > 0,
    canUseApp: (isOnline || isDataCached) && phrases.length > 0,
  };

  return (
    <OfflineDataContext.Provider value={value}>
      {children}
    </OfflineDataContext.Provider>
  );
}

export function useOfflineData(): OfflineDataContextType {
  const context = useContext(OfflineDataContext);
  if (context === undefined) {
    throw new Error('useOfflineData must be used within an OfflineDataProvider');
  }
  return context;
}

// HOC –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ offline —Å–æ—Å—Ç–æ—è–Ω–∏–π
export function withOfflineData<P extends object>(
  Component: React.ComponentType<P>
): React.ComponentType<P> {
  return function OfflineWrappedComponent(props: P) {
    const { canUseApp, isLoading, isOfflineMode } = useOfflineData();
    
    if (isLoading) {
      return (
        <View style={{
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: Colors.background || '#FFFFFF',
        }}>
          <ActivityIndicator size="large" color={Colors.primary || '#DC2626'} />
          <Text style={{
            marginTop: 16,
            fontSize: 16,
            color: Colors.textLight || '#666666',
            textAlign: 'center',
          }}>
            –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
          </Text>
        </View>
      );
    }
    
    if (!canUseApp) {
      return (
        <View style={{
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: Colors.background || '#FFFFFF',
          padding: 40,
        }}>
          <Text style={{ fontSize: 64, marginBottom: 20 }}>üì°</Text>
          <Text style={{
            fontSize: 20,
            fontWeight: '600',
            color: Colors.text || '#000000',
            marginBottom: 12,
            textAlign: 'center',
          }}>
            –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          </Text>
          <Text style={{
            fontSize: 16,
            color: Colors.textLight || '#666666',
            textAlign: 'center',
            lineHeight: 24,
          }}>
            {isOfflineMode 
              ? '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.'
              : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            }
          </Text>
        </View>
      );
    }
    
    return <Component {...props} />;
  };
}